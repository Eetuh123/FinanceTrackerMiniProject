@using System.Globalization
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model FinanceTracker.Models.HomeViewModel

@{
    ViewData["Title"] = "Home Page";
}

<script src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<div x-data="{ showAddModal: false, showGoalModal: false }" class="h-screen w-full p-8">
    <div class="flex space-x-8">
        <!-- Left column -->
        <div class="w-1/3">
            <button x-on:click="showAddModal = true"
                    type="button"
                    class="w-full flex cursor-pointer items-center justify-center bg-pink-900 text-white px-4 py-2 rounded border border-pink-900 cursor-pointer hover:bg-white hover:text-neutral-900 font-semibold duration-300">
                Add Cash
            </button>

            @if (Model.Transactions?.Any() ?? false)
            {
                <div class="p-8 rounded flex justify-center items-start">
                    <div class="w-full min-w-[400px] h-[calc(100vh-12rem)] overflow-y-auto overflow-x-hidden px-6 py-8">
                            @foreach (var yearGroup in Model.Transactions
                           .OrderByDescending(t => t.date)
                           .GroupBy(t => t.date.Year))
                            {
                                <section class="mb-8 border border-gray-200 rounded-xl bg-white shadow-sm">
                                    <header class="px-6 py-4 border-b border-gray-100">
                                        <h2 class="text-2xl font-bold text-gray-700">
                                            @yearGroup.Key
                                        </h2>
                                    </header>
                                    <div class="divide-y divide-gray-100">
                                        @foreach (var monthGroup in yearGroup
                                       .GroupBy(t => t.date.Month)
                                       .OrderByDescending(g => g.Key))
                                        {
                                            <div class="px-6 py-6">
                                                <h3 class="text-xl font-semibold text-gray-600 mb-4">
                                                    @CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(monthGroup.Key)
                                                </h3>
                                                <div class="space-y-4">
                                                    @foreach (var dayGroup in monthGroup
                                                   .GroupBy(t => t.date.Day)
                                                   .OrderByDescending(g => g.Key))
                                                    {
                                                        <div class="pl-4">
                                                            <h4 class="text-lg font-medium text-gray-500 mb-2 border-l-4 border-indigo-400 pl-3">
                                                                @($"{dayGroup.Key} {CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(monthGroup.Key)}")
                                                            </h4>
                                                            <ul class="divide-y divide-gray-50">
                                                                @foreach (var tx in dayGroup.OrderBy(t => t.date))
                                                                {
                                                                    <li class="py-2 flex items-center">
                                                                        @await Html.PartialAsync("_TransactionItem", tx)
                                                                    </li>
                                                                }
                                                            </ul>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </section>
                            }
                        </div>

                </div>
            }
            else
            {
                <p class="mt-4 text-gray-600">You have no transactions yet.</p>
            }
        </div>

        <!-- Right column -->
        <div class="w-2/3 flex flex-col">
            <div class="mt-6 grid grid-cols-3 gap-4">
                <!-- Next payday -->
                <div class="bg-white p-4 rounded-lg shadow text-gray-800">
                    <p class="text-sm">Upcoming payday</p>
                    @if (Model.NextPayday > DateTime.Today)
                    {
                        <div class="mt-2 flex flex-col gap-y-1">
                            <span class="text-xl font-semibold">
                                @Model.NextPayday.ToString("dd/MM/yyyy")
                            </span>
                            <span class="text-gray-500 text-base">
                                (@Model.DaysUntilNextPayday days)
                            </span>
                        </div>
                    }
                    else
                    {
                        <div class="mt-2 text-gray-500 font-medium">
                            No upcoming payments
                        </div>
                    }
                </div>

                <!-- Spent so far -->
                <div class="bg-white p-4 rounded-lg shadow text-gray-800">
                    <p class="text-sm">Spent so far this month</p>
                    <p class="text-xl font-semibold">
                        @Model.ExpensesThisPeriod.ToString("C")
                    </p>
                </div>

                <!-- Avg daily spend -->
                <div class="bg-white p-4 rounded-lg shadow text-gray-800">
                    <p class="text-sm">Average daily spend</p>
                    <p class="text-xl font-semibold">
                        @Model.DailyExpenseRate.ToString("C")
                    </p>
                </div>

                <!-- Income this month -->
                <div class="bg-white p-4 rounded-lg shadow text-gray-800">
                    <p class="text-sm">Income this month</p>
                    <p class="text-xl font-semibold">
                        @Model.IncomeThisPeriod.ToString("C")
                    </p>
                </div>

                <!-- Savings goal (clickable) -->
                <button x-on:click="showGoalModal = true"
                        class="bg-white p-4 rounded-lg shadow text-gray-800 text-left cursor-pointer hover:shadow-md transition-shadow">
                    <p class="text-sm">Savings goal</p>
                    <p class="text-xl font-semibold">
                        @Model.SavingsGoal.ToString("C")
                    </p>
                </button>

                <!-- Potential savings -->
                <div class="bg-white p-4 rounded-lg shadow text-gray-800">
                    <p class="text-sm">Potential savings remaining</p>
                    <p class="text-xl font-semibold">
                        @Model.PotentialSavings.ToString("C")
                    </p>
                </div>
            </div>

            <canvas id="myChart" class="w-full h-48 mt-6"></canvas>
        </div>
    </div>

    <!-- Add Cash Modal -->
    <div x-show="showAddModal"
         x-cloak
         class="fixed inset-0 bg-zinc-800/50 flex items-center justify-center">
        <div x-on:click.away="showAddModal = false"
             class="bg-white rounded-lg p-6 max-w-md w-full">
            <button x-on:click="showAddModal = false"
                    class="float-right text-gray-600 hover:font-bold cursor-pointer hover:text-gray-900">
                ✕
            </button>
            <h3 class="text-xl font-semibold mb-4">Add Cash</h3>
            @await Html.PartialAsync("_AddCashModalPartial", new FinanceTracker.Models.Transactions())
        </div>
    </div>

    <!-- Set Savings Goal Modal -->
    <div x-show="showGoalModal"
         x-cloak
         class="fixed inset-0 bg-black/50 flex items-center justify-center">
        <div x-on:click.away="showGoalModal = false"
             class="bg-white rounded-lg p-6 max-w-sm w-full">
            <button x-on:click="showGoalModal = false"
                    class="float-right text-gray-600 hover:font-bold cursor-pointer hover:text-gray-900">
                ✕
            </button>
            <h3 class="text-xl font-semibold mb-4">Set Savings Goal</h3>
            <form method="post" asp-controller="Main" asp-action="SetSavingsGoal">
                @Html.AntiForgeryToken()
                <label class="block mb-3">
                    <span class="text-gray-700">New goal amount</span>
                    <input type="number"
                           name="savingsGoal"
                           step="1"
                           min="0"
                           value="@Model.SavingsGoal"
                           class="mt-1 block w-full border border-gray-300 rounded px-2 py-1" />
                </label>
                <div class="flex justify-end space-x-2">
                    <button type="button"
                            x-on:click="showGoalModal = false"
                            class="bg-pink-900 text-white px-4 py-2 rounded border border-pink-900 cursor-pointer hover:bg-white hover:text-neutral-900 font-semibold duration-300">
                        Cancel
                    </button>
                    <button type="submit"
                            class="bg-pink-900 text-white px-4 py-2 rounded border border-pink-900 cursor-pointer hover:bg-white hover:text-neutral-900 font-semibold duration-300">
                        Save
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    const labels  = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.ChartLabels));
    const income  = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.IncomeSeries));
    const expense = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.ExpenseSeries));
    const ctx     = document.getElementById('myChart').getContext('2d');

    new Chart(ctx, {
      type: 'bar',
      data: {
        labels: labels,
        datasets: [
          { label: 'Income', data: income },
          { label: 'Expense', data: expense }
        ]
      },
      options: {
        responsive: true,
        scales: {
          x: { stacked: true },
          y: { stacked: true }
        }
      }
    });
</script>
