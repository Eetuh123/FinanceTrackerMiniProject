@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model FinanceTracker.Models.HomeViewModel
@{
    ViewData["Title"] = "Home Page";
}
<script src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<div x-data="{ showAddModal: false }" class="h-screen w-full p-8">
    <div class="flex space-x-8">
        <!-- Left column -->
        <div class="w-1/3">
            <p class="text-5xl font-regular mb-4 text-dark">Money Time</p>
            <button x-on:click="showAddModal = true"
                    class="mb-4 bg-pink-900 text-white px-4 py-2 rounded cursor-pointer">
                Add Cash
            </button>

            @if (Model.Transactions?.Any() ?? false)
            {
                <ul class="mt-4 space-y-2">
                    @foreach (var tx in Model.Transactions)
                    {
                        <partial name="_TransactionItem" model="tx" />
                    }
                </ul>
            }
            else
            {
                <p class="mt-4 text-gray-600">You have no transactions yet.</p>
            }
        </div>

        <!-- Right column -->
        <div class="w-2/3 flex flex-col">
            <canvas id="myChart" class="w-full h-48"></canvas>
        </div>
    </div>

    <!-- Modal -->
    <div x-show="showAddModal"
         x-cloak
         class="fixed inset-0 bg-zinc-800/50 flex items-center justify-center">
        <div x-on:click.away="showAddModal = false"
             class="bg-white rounded-lg p-6 max-w-md w-full">
            <button x-on:click="showAddModal = false"
                    class="float-right text-gray-600 hover:text-gray-900 font-normal hover:font-bold transition-all cursor-pointer">
                ✕
            </button>
            <h3 class="text-xl font-semibold mb-4">Add Cash</h3>
            @await Html.PartialAsync("_AddCashModalPartial", new FinanceTracker.Models.Transactions())
        </div>
    </div>
</div>

<script>
    var labels  = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.ChartLabels));
    var income  = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.IncomeSeries));
    var expense = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.ExpenseSeries));

    var ctx = document.getElementById('myChart').getContext('2d');
    new Chart(ctx, {
      type: 'bar',
      data: {
        labels: labels,
        datasets: [
          { label: 'Income', data: income },
          { label: 'Expense', data: expense }
        ]
      },
      options: {
        responsive: true,
        scales: {
          x: { stacked: true },
          y: { stacked: true }
        }
      }
    });
</script>
